
/*   MAIN DU COURS D'AUJOURD'HUI  (2011-04-11) */

#include <p18f252.h>
#include <delays.h>

#define Q2 PORTCbits.RC0 // Relais Statique
#define Q1 PORTCbits.RC1 // Ventilateur
#define nand PORTBbits.RB0 // relaché=0 appuyé=1
#define nand_relache 0
#define nand_appuye 1
#define BPRouge PORTBbits.RB2 // relaché=1 appuyé=0
#define BPRouge_appuye 0
#define BPRouge_relache 1
#define BP1 PORTAbits.RA4 // relaché=1 appuyé=0
#define BP1_appuye 0
#define BP1_relache 1
#define BP2 PORTAbits.RA5 
#define BP2_appuye 0
#define BP2_relache 1
#define BP3 PORTAbits.RA2
#define BP3_appuye 0
#define BP3_relache 1
#define BP4 PORTAbits.RA3
#define BP4_appuye 0
#define BP4_relache 1
#define BPJaune PORTAbits.RA1

int allumerled(int premier, int deuxieme);
void putByte(long data);
void maxAll (long reg, long col);
void maxSingle( long reg, long col);
int afficheur(int reload);

void main(void)
{
TRISA=0xFF; // entrée
TRISB=0b11100011; // RB3 RB4 RB5 sortie => afficheurs(max)
TRISC=0x00; // sortie  RC0 Q2 - RC1 Q1

ADCON1=0b11001110;
Q1=0;
Q2=0;

while(1){

if (BP1 == BP1_appuye)
	{	
		Q1=1;
		Q2=1;
	}
else{
		Q1=0;
		Q2=0;
	}
afficheur(1);
	}
}





/*
une ou plusieurs variables stockent la mémoire à afficher.
l'appel de cette fonction provoque un reload de tous les afficheurs.
*/
/*
max_DIN=
max_LOAD=
max_CLK=
afficheur1=
afficheur2=
afficheur3=
afficheur4=
afficheur5=
afficheur6=
afficheur7=
afficheur8=
*/

/*
int afficheur(int variable)
{
/* if variable == 1 => rafraichir les afficheurs.
   if variable == 0 => éteindre les afficheurs.
*/
 
/* Ci-dessous : fonction de rafraichissement des afficheurs. */


int afficheur(int reload)
{
#define dataIn PORTBbits.RB3
#define load PORTBbits.RB4
#define clock PORTBbits.RB5

     
                         // define max7219 registers

    long max7219_reg_noop = 0x00;
    long max7219_reg_digit0 = 0x01;
    long max7219_reg_digit1 = 0x02;
    long max7219_reg_digit2 = 0x03;
    long max7219_reg_digit3 = 0x04;
    long max7219_reg_digit4 = 0x05;
    long max7219_reg_digit5 = 0x06;
    long max7219_reg_digit6 = 0x07;
    long max7219_reg_digit7 = 0x08;
    long max7219_reg_decodeMode = 0x09;
    long max7219_reg_intensity = 0x0a;
    long max7219_reg_scanLimit = 0x0b;
    long max7219_reg_shutdown = 0x0c;
    long max7219_reg_displayTest = 0x0f;


maxSingle( 0x09, 0xFF);// decode mode 0xff
maxSingle( 0x0A, 0x05);
maxSingle( 0x0B, 0x07); // scan limit 0x07
maxSingle( 0x0C, 0x01); // normal mode. shutdown is 0x00
maxSingle( 0x0F, 0xFF);
maxSingle( 0x01, 0x01);
maxSingle( 0x02, 0x02);
maxSingle( 0x03, 0x03);
maxSingle( 0x04, 0x04);
maxSingle( 0x05, 0x05);
maxSingle( 0x06, 0x06);
maxSingle( 0x07, 0x07);
maxSingle( 0x08, 0x08);
}
     
void putByte(long data) {
      long i = 8;
      long mask;
      while(i > 0) {
        mask = 0x01 << (i - 1); // get bitmask
        clock=0; // tick
        if (data & mask){ // choose bit
          dataIn=1; // send 1
        }else{
          dataIn=0; // send 0
        }
        clock=1; // tock
        --i; // move to lesser bit
      }
    }
     
    void maxSingle( long reg, long col) {
    //maxSingle is the "easy" function to use for a //single max7219
     
      load=0; // begin
      putByte(reg); // specify register
      putByte(col);//((data & 0x01) * 256) + data >> 1); // put data
      load=0; // and load da shit
      load=1;
    }
    void maxAll (long reg, long col) { // initialize all MAX7219's in the system
      int c = 0;
      load=0; // begin
//      for (;c<=maxInUse;c++) {
      putByte(reg); // specify register
      putByte(col);//((data & 0x01) * 256) + data >> 1); // put data
//        }
      load=0;
      load=1;
    }
/*
    void setup () {
     
      maxAll(max7219_reg_scanLimit, 0x07);
      maxAll(max7219_reg_decodeMode, 0x00); // using an led matrix (not digits)
      maxAll(max7219_reg_shutdown, 0x01); // not in shutdown mode
      maxAll(max7219_reg_displayTest, 0x00); // no display test
       for (e=1; e<=8; e++) { // empty registers, turn all LEDs off
        maxAll(e,0);
      }
      maxAll(max7219_reg_intensity, 0x0f & 0x0f); // the first 0x0f is the value you can set
                                                      // range: 0x00 to 0x0f
    }
*/
